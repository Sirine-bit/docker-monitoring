---
- name: Create configuration directory
  file:
    path: "{{ project_dir }}/configs"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Generate prometheus configuration
  template:
    src: prometheus.yml.j2
    dest: "{{ project_dir }}/prometheus.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  notify: restart monitoring stack

- name: Generate alertmanager configuration
  template:
    src: alertmanager.yml.j2
    dest: "{{ project_dir }}/alertmanager.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  notify: restart monitoring stack

- name: Generate alert rules
  template:
    src: alert_rules.yml.j2
    dest: "{{ project_dir }}/alert_rules.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  notify: restart monitoring stack

- name: Generate docker-compose file
  template:
    src: docker-compose.yml.j2
    dest: "{{ project_dir }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  notify: restart monitoring stack

- name: Create Docker volumes for persistent data
  become: true
  shell: docker volume create {{ item }}
  loop:
    - prometheus_data
    - grafana_data
    - alertmanager_data
  ignore_errors: yes
  changed_when: false

- name: Validate docker-compose configuration
  shell: docker compose config
  args:
    chdir: "{{ project_dir }}"
  register: compose_config
  changed_when: false

- name: Stop any existing monitoring stack
  become: true
  shell: docker compose down
  args:
    chdir: "{{ project_dir }}"
  ignore_errors: yes
  changed_when: false

- name: Pull latest images
  become: true
  shell: docker compose pull
  args:
    chdir: "{{ project_dir }}"
  register: pull_result
  changed_when: "'Pulled' in pull_result.stdout or 'Downloaded' in pull_result.stdout"

- name: Start monitoring stack
  become: true
  shell: docker compose up -d
  args:
    chdir: "{{ project_dir }}"
  register: compose_result

- name: Wait for services to be ready
  become: true
  shell: docker compose ps
  args:
    chdir: "{{ project_dir }}"
  register: docker_status
  retries: 5
  delay: 10
  until: "'Up' in docker_status.stdout"

- name: Display services status
  debug:
    msg: |
      Monitoring Stack Status: {{ 'SUCCESS' if compose_result.rc == 0 else 'FAILED' }}
      Services:
      {{ docker_status.stdout }}

- name: Check service health (optional)
  uri:
    url: "http://{{ ansible_host }}:{{ item.port }}"
    method: GET
    status_code: 200
  register: health_check
  ignore_errors: yes
  loop:
    - { service: "prometheus", port: "9090" }
    - { service: "grafana", port: "3000" }
    - { service: "alertmanager", port: "9093" }
  when: ansible_host is defined

- name: Display health check results
  debug:
    msg: |
      Health Check Results:
      {% for result in health_check.results %}
      {{ result.item.service }}: {{ 'HEALTHY' if result.status == 200 else 'UNHEALTHY' }}
      {% endfor %}
  when: health_check is defined and health_check.results is defined