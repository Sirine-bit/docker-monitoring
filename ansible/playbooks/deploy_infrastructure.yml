---
- name: Universal Docker & Docker Compose Installer (All Ubuntu - FIXED)
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    docker_compose_version: "v2.27.1"  
  
  tasks:
    - name: Ensure apt cache is updated
      apt:
        update_cache: yes
    
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
          - lsb-release
        state: present
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    
    - name: Install Docker engine with Docker Compose plugin
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
    
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
    
    - name: Add current user to docker group (for non-root access)
      user:
        name: "{{ ansible_user | default(ansible_ssh_user) }}"
        groups: docker
        append: yes
      when: ansible_user is defined or ansible_ssh_user is defined
    
    # Fix: Ensure Docker can find the compose plugin
    - name: Create user Docker CLI plugins directory
      file:
        path: "/home/{{ ansible_user | default(ansible_ssh_user) }}/.docker/cli-plugins"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user | default(ansible_ssh_user) }}"
        group: "{{ ansible_user | default(ansible_ssh_user) }}"
      when: ansible_user is defined or ansible_ssh_user is defined
    
    - name: Check if docker compose works
      command: docker compose version
      register: compose_check
      failed_when: false
      changed_when: false
    
    - name: Fix Docker Compose installation
      block:
        - name: Detect architecture for Docker Compose download
          set_fact:
            compose_arch: "{{ 'x86_64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
        
        - name: Ensure system-wide Docker CLI plugins directory exists
          file:
            path: /usr/libexec/docker/cli-plugins
            state: directory
            mode: '0755'
        
        - name: Download Docker Compose binary to system location
          get_url:
            url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-{{ compose_arch }}"
            dest: /usr/libexec/docker/cli-plugins/docker-compose
            mode: '0755'
            force: yes
        
        - name: Copy Docker Compose to user plugins directory
          copy:
            src: /usr/libexec/docker/cli-plugins/docker-compose
            dest: "/home/{{ ansible_user | default(ansible_ssh_user) }}/.docker/cli-plugins/docker-compose"
            mode: '0755'
            owner: "{{ ansible_user | default(ansible_ssh_user) }}"
            group: "{{ ansible_user | default(ansible_ssh_user) }}"
            remote_src: yes
          when: ansible_user is defined or ansible_ssh_user is defined
        
        - name: Create symlink for backward compatibility
          file:
            src: /usr/libexec/docker/cli-plugins/docker-compose
            dest: /usr/local/bin/docker-compose
            state: link
      
      when: compose_check.rc != 0
    
    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false
    
    - name: Show Docker version
      debug:
        msg: "Docker installed: {{ docker_version.stdout }}"
    
    - name: Verify Docker Compose installation
      command: docker compose version
      register: compose_version
      changed_when: false
    
    - name: Show Docker Compose version
      debug:
        msg: "Docker Compose installed: {{ compose_version.stdout }}"
    
    - name: Test Docker functionality
      command: docker run --rm hello-world
      register: docker_test
      changed_when: false
      ignore_errors: yes
    
    - name: Show Docker test result
      debug:
        msg: "Docker test: {{ 'SUCCESS' if docker_test.rc == 0 else 'FAILED - may need to logout/login for group changes' }}"
    
    # Force la prise en compte des changements de groupe
    - name: Reset SSH connection to apply group changes
      meta: reset_connection
      when: docker_test.rc != 0
    
    - name: Final Docker Compose verification (after group refresh)
      command: docker compose version
      register: final_compose_check
      changed_when: false
      when: docker_test.rc != 0
    
    - name: Show final status
      debug:
        msg: "Final Docker Compose status: {{ 'SUCCESS' if final_compose_check.rc == 0 else 'NEEDS MANUAL LOGOUT/LOGIN' }}"
      when: docker_test.rc != 0